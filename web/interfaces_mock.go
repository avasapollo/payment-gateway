// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package web is a generated GoMock package.
package web

import (
	context "context"
	payments "github.com/avasapollo/payment-gateway/payments"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPayment is a mock of Payment interface
type MockPayment struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentMockRecorder
}

// MockPaymentMockRecorder is the mock recorder for MockPayment
type MockPaymentMockRecorder struct {
	mock *MockPayment
}

// NewMockPayment creates a new mock instance
func NewMockPayment(ctrl *gomock.Controller) *MockPayment {
	mock := &MockPayment{ctrl: ctrl}
	mock.recorder = &MockPaymentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPayment) EXPECT() *MockPaymentMockRecorder {
	return m.recorder
}

// Authorize mocks base method
func (m *MockPayment) Authorize(ctx context.Context, req *payments.AuthorizeReq) (*payments.Transaction, error) {
	ret := m.ctrl.Call(m, "Authorize", ctx, req)
	ret0, _ := ret[0].(*payments.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize
func (mr *MockPaymentMockRecorder) Authorize(ctx, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockPayment)(nil).Authorize), ctx, req)
}

// Void mocks base method
func (m *MockPayment) Void(ctx context.Context, req *payments.VoidReq) (*payments.Transaction, error) {
	ret := m.ctrl.Call(m, "Void", ctx, req)
	ret0, _ := ret[0].(*payments.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Void indicates an expected call of Void
func (mr *MockPaymentMockRecorder) Void(ctx, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Void", reflect.TypeOf((*MockPayment)(nil).Void), ctx, req)
}

// Capture mocks base method
func (m *MockPayment) Capture(ctx context.Context, req *payments.CaptureReq) (*payments.Transaction, error) {
	ret := m.ctrl.Call(m, "Capture", ctx, req)
	ret0, _ := ret[0].(*payments.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Capture indicates an expected call of Capture
func (mr *MockPaymentMockRecorder) Capture(ctx, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capture", reflect.TypeOf((*MockPayment)(nil).Capture), ctx, req)
}

// Refund mocks base method
func (m *MockPayment) Refund(ctx context.Context, req *payments.RefundReq) (*payments.Transaction, error) {
	ret := m.ctrl.Call(m, "Refund", ctx, req)
	ret0, _ := ret[0].(*payments.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refund indicates an expected call of Refund
func (mr *MockPaymentMockRecorder) Refund(ctx, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refund", reflect.TypeOf((*MockPayment)(nil).Refund), ctx, req)
}
